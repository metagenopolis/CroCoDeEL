#!/bin/env python3
# -*- coding: utf-8 -*-

import sys
import argparse
import pandas as pd
from contamination_plots_report import ContaminationPlotsReport
from contamination_case import ContaminationCaseIO


def get_arguments() -> argparse.Namespace:
    parser = argparse.ArgumentParser(prog="CroCoDeEL")

    subparsers = parser.add_subparsers(
        title="positional arguments",
        help="Select subcommand",
        dest="command",
        required=True,
    )

    search_conta_parser = subparsers.add_parser(
        "search_conta", help="Search cross-sample contamination"
    )
    search_conta_parser.add_argument(
        "-s",
        dest="species_abundance_table",
        type=argparse.FileType("r"),
        required=True,
        help="TSV file giving the species abundance profiles in metagenomic samples.",
    )
    search_conta_parser.add_argument(
        "-o",
        dest="output_dir",
        type=str,
        required=True,
        help="Output directory where the results will be saved.",
    )

    plot_conta_parser = subparsers.add_parser(
        "plot_conta",
        help="Create a PDF report with scatterplots representing "
        "species abundance profiles for each contamination case.",
    )
    plot_conta_parser.add_argument(
        "-s",
        dest="species_abundance_table",
        type=argparse.FileType("r"),
        required=True,
        help="TSV file giving the abundance of species across metagenomic samples.",
    )
    plot_conta_parser.add_argument(
        "-c",
        dest="crocodeel_results",
        type=argparse.FileType("r"),
        required=True,
        help="TSV file generated by CroCoDeEL listing "
        "all detected contamination cases.",
    )
    plot_conta_parser.add_argument(
        "--nrow",
        dest="nrow",
        type=int,
        choices=range(1,11),
        default=4,
        metavar="NROW",
        help="Number of scatterplots to draw vertically on each page "
        "(default: %(default)d)"
    )
    plot_conta_parser.add_argument(
        "--ncol",
        dest="ncol",
        type=int,
        choices=range(1,11),
        default=4,
        metavar="NCOL",
        help="Number of scatterplots to draw horizontally on each page "
        "(default: %(default)d)"
    )
    plot_conta_parser.add_argument(
        "--no-conta-line",
        dest="no_conta_line",
        action='store_true',
        help="Do not show contamination line in scatterplots."
    )
    plot_conta_parser.add_argument(
        "--color-conta-species",
        dest="color_conta_species",
        action='store_true',
        help="Use a different color for species introduced by contamination."
    )
    plot_conta_parser.add_argument(
        "-o",
        dest="output_file",
        type=argparse.FileType("wb"),
        required=True,
        help="Path to the output PDF file.",
    )

    return parser.parse_args(args=sys.argv[1:] or ["--help"])


def main() -> None:
    args = get_arguments()

    if args.command == "plot_conta":
        species_abundance_table = pd.read_csv(
            args.species_abundance_table,
            sep="\t",
            header=0,
            index_col=0,
        )
        args.species_abundance_table.close()

        contamination_cases = list(ContaminationCaseIO.read_tsv(args.crocodeel_results))
        args.crocodeel_results.close()

        report = ContaminationPlotsReport(
            mgs_profiles=species_abundance_table,
            contamination_cases=contamination_cases,
            nrow=args.nrow,
            ncol=args.ncol,
            no_contamination_line=args.no_conta_line,
            color_contamination_specific_species=args.color_conta_species
        )
        report.save_to_pdf(args.output_file)
        args.output_file.close()


if __name__ == "__main__":
    main()
