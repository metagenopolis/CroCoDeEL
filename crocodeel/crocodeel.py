#!/bin/env python3
# -*- coding: utf-8 -*-

import sys
import argparse
from contamination_case import ContaminationCaseIO
from contamination_plots_report import ContaminationPlotsReport, ContaminationCase
import pandas as pd


def get_arguments() -> argparse.Namespace:
    parser = argparse.ArgumentParser(prog="CroCoDeEL")

    subparsers = parser.add_subparsers(
        title="positional arguments",
        help="Select subcommand",
        dest="command",
        required=True,
    )

    search_conta_parser = subparsers.add_parser(
        "search_conta", help="Search cross-sample contamination"
    )
    search_conta_parser.add_argument(
        "-s",
        dest="species_abundance_table",
        type=argparse.FileType("r"),
        required=True,
        help="TSV file giving the species abundance profiles in metagenomic samples.",
    )
    search_conta_parser.add_argument(
        "-o",
        dest="output_dir",
        type=str,
        required=True,
        help="Output directory where the results will be saved.",
    )

    plot_conta_parser = subparsers.add_parser(
        "plot_conta",
        help="Create a PDF report with scatterplots representing "
        "species abundance profiles for each contamination case",
    )
    plot_conta_parser.add_argument(
        "-s",
        dest="species_abundance_table",
        type=argparse.FileType("r"),
        required=True,
        help="TSV file giving the abundance of species across metagenomic samples.",
    )
    plot_conta_parser.add_argument(
        "-c",
        dest="crocodeel_results",
        type=argparse.FileType("r"),
        required=True,
        help="TSV file generated by CroCoDeEL listing "
        "all detected contamination cases",
    )
    plot_conta_parser.add_argument(
        "-o",
        dest="output_file",
        type=argparse.FileType("wb"),
        required=True,
        help="Path to the output PDF file",
    )

    return parser.parse_args(args=None if sys.argv[1:] else ["--help"])


def main() -> None:
    args = get_arguments()

    if args.command == "plot_conta":
        species_abundance_table = pd.read_csv(
            args.species_abundance_table,
            sep="\t",
            header=0,
            index_col=0,
        )

        contamination_cases = list(ContaminationCaseIO.read_tsv(args.crocodeel_results))

        report = ContaminationPlotsReport(species_abundance_table, contamination_cases)
        report.save_to_pdf(args.output_file)


if __name__ == "__main__":
    main()
